//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyVote.Data.Entities
{
	using System;
	using System.Data.Entity;
	using System.Data.Entity.Infrastructure;
	using System.Diagnostics.CodeAnalysis;

	[SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
	public interface IEntities : IDisposable
	{
		IDbSet<C__RefactorLog> C__RefactorLog { get; set; }
		IDbSet<MVCategory> MVCategories { get; set; }
		IDbSet<MVDate> MVDates { get; set; }
		IDbSet<MVGeography> MVGeographies { get; set; }
		IDbSet<MVPoll> MVPolls { get; set; }
		IDbSet<MVPollComment> MVPollComments { get; set; }
		IDbSet<MVPollOption> MVPollOptions { get; set; }
		IDbSet<MVPollResponse> MVPollResponses { get; set; }
		IDbSet<MVPollSubmission> MVPollSubmissions { get; set; }
		IDbSet<MVReportedPoll> MVReportedPolls { get; set; }
		IDbSet<MVReportedPollStateLog> MVReportedPollStateLogs { get; set; }
		IDbSet<MVReportedPollStateOption> MVReportedPollStateOptions { get; set; }
		IDbSet<MVUser> MVUsers { get; set; }
		IDbSet<MVUserRole> MVUserRoles { get; set; }
		IDbSet<ActiveUser> ActiveUsers { get; set; }
		IDbSet<MyVotePhoto> MyVotePhotos { get; set; }
		DbEntityEntry Entry(object entity);
		void SetState(object entity, EntityState state);
		int SaveChanges();

		Guid Identity { get; }
	}

	[SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
	public partial class Entities : DbContext, IEntities, IDisposable
	{
		private const string Key = "__MYVOTE-Context__";

		private static object contextLock = new object();
		private int referenceCount;

		public Entities()
			 : base("name=Entities")
		{
		}

		protected override void OnModelCreating(DbModelBuilder modelBuilder)
		{
			throw new UnintentionalCodeFirstException();
		}

		public IDbSet<C__RefactorLog> C__RefactorLog { get; set; }
		public IDbSet<MVCategory> MVCategories { get; set; }
		public IDbSet<MVDate> MVDates { get; set; }
		public IDbSet<MVGeography> MVGeographies { get; set; }
		public IDbSet<MVPoll> MVPolls { get; set; }
		public IDbSet<MVPollComment> MVPollComments { get; set; }
		public IDbSet<MVPollOption> MVPollOptions { get; set; }
		public IDbSet<MVPollResponse> MVPollResponses { get; set; }
		public IDbSet<MVPollSubmission> MVPollSubmissions { get; set; }
		public IDbSet<MVReportedPoll> MVReportedPolls { get; set; }
		public IDbSet<MVReportedPollStateLog> MVReportedPollStateLogs { get; set; }
		public IDbSet<MVReportedPollStateOption> MVReportedPollStateOptions { get; set; }
		public IDbSet<MVUser> MVUsers { get; set; }
		public IDbSet<MVUserRole> MVUserRoles { get; set; }
		public IDbSet<ActiveUser> ActiveUsers { get; set; }
		public IDbSet<MyVotePhoto> MyVotePhotos { get; set; }

		public static Entities GetContext()
		{
			lock (Entities.contextLock)
			{
				Entities context;
				var dictionary = Csla.ApplicationContext.LocalContext;

				if (dictionary.Contains(Entities.Key))
				{
					context = (Entities)dictionary[Entities.Key];
				}
				else
				{
					context = new Entities();
					dictionary.Add(Entities.Key, context);
				}

				context.referenceCount++;
				return context;
			}
		}

		void IDisposable.Dispose()
		{
			lock (Entities.contextLock)
			{
				this.referenceCount--;

				if (this.referenceCount == 0)
				{
					Csla.ApplicationContext.LocalContext.Remove(Key);
					base.Dispose();
				}
			}
		}

		public void SetState(object entity, EntityState state)
		{
			this.Entry(entity).State = state;
		}


		public Guid Identity { get; private set; }
	}

}
